#!/usr/bin/env python
"""
    %prog [options] config_file command meds_file1 meds_file2 ..
    Process the input meds files in chunks

    Possible commands are:
        setup - setup jobs
        collate - combine job outputs into a single file
        verify - verify that all job outputs are present and OK
        clean - clean all outputs from a run
        archive - run after collate to delete intermediate files and tar logs
        link - make symlinks to all final outputs under {run}/output
        collate-link - collate and link the final outputs
"""

from __future__ import print_function
import os
import sys
import meds
import fitsio
import numpy as np
import glob

from optparse import OptionParser
parser = OptionParser(__doc__)


parser.add_option("--system",default='shell',
                  help=("name of system for jobs"))

parser.add_option("--queue",default=None,
                  help=("queue to submit to"))

parser.add_option("--extra-cmds",default='',
                  help=("extra commands to run in job script"))

parser.add_option('--noblind',action='store_true',default=False,
                  help="don't blind the catalog")

parser.add_option('--clobber',action='store_true',default=False,
                  help="clobber existing catalog, else skip over")

parser.add_option('--skip-errors',action='store_true',default=False,
                  help="skip over errors")

parser.add_option('--nocompress',action='store_true',default=False,
                  help="do not compress when archiving logs")

parser.add_option("--verbosity", default=0, type=int,
                  help=("set verbosity level"))

parser.add_option("--seed", default=None,type=int,
                  help=("random seed to make seeds for jobs"))

from ngmixer.megamixer import NGMegaMixer
from ngmixer.megamixer import SLACNGMegaMixer,SLACArrayNGMegaMixer
from ngmixer.megamixer import CakeNGMegaMixer
import ngmixer

class SLACMEDSMegaMixer(dict):
    """
    conf has ngmix config plus

    run:
        name: "some name"
        identifier_nchar: 12
        chunksize: 1000
        output_dir: "/some/path"
    """
    def __init__(self, config_file, meds_files, seed=None):
        self.config_file = config_file
        self._load_config()
        self.meds_files=meds_files
        self.rng = np.random.RandomState(seed=seed)

        self._set_files()

    def setup(self):
        """
        make directories, write scripts, copy the config file
        """

        print("setting up scripts")

        self._make_output_dirs()
        self._make_scripts()
    
    def _make_scripts(self):
        """
        write the scripts, assuming the directories are in place
        """
        print("writing under:",self.files['work_dir'])
        for chunk,rng in enumerate(self.chunk_ranges):
            self._write_script(chunk,rng)
            self._write_job_script(chunk,rng)

    def _write_script(self, chunk, rng):
        files=self.files

        fmt=self._get_script_template()
        args = {}

        args['ngmix_config'] = self.config_file
        args['output_file'] = self._get_chunk_output_file(chunk,rng)
        args['meds_files'] = ','.join(self.meds_files)
        args['start'] = rng[0]
        args['stop'] = rng[1]

        if 'seed' not in self:
            seed = self.rng.randint(low=1,high=1000000000)
            args['seed_opt'] = '--seed=%d' % seed
        else:
            args['seed_opt'] = ''

        scr = fmt.format(**args)

        scr_name = self._get_chunk_script_file(chunk,rng)
        with open(scr_name,'w') as fp:
            fp.write(scr)

        os.system('chmod 755 %s' % scr_name)

    def _write_job_script(self, chunk, rng):
        fmt=self._get_job_template()
        args = {}

        args['jobname'] = self._get_chunk_output_base(chunk,rng)
        args['logfile'] = self._get_chunk_log_file(chunk,rng)

        scr = fmt.format(**args)

        scr_name = self._get_chunk_job_file(chunk,rng)
        with open(scr_name,'w') as fp:
            fp.write(scr)

        os.system('chmod 755 %s' % scr_name)

    def _set_files(self):
        files={
            'config_file':self.config_file,
            'meds_files':self.meds_files,
            'output_dir':self._get_output_dir(),
        }

        self._set_output_dirs(files)

        self.files=files

    def _set_output_dirs(self,files):

        bname=os.path.basename(self.meds_files[0])
        nchar=self.run_conf['identifier_nchar']
        files['identifier'] = bname[0:nchar]

        odir=files['output_dir']

        files['run_dir'] = os.path.join(
            odir,
            self.run_conf['name'],
        )

        files['work_dir'] = os.path.join(
            files['run_dir'],
            files['identifier'],
        )

    def _get_output_dir(self):
        odir=self.run_conf['output_dir']
        odir=os.path.expandvars(odir)
        odir=os.path.expanduser(odir)
        return odir

    def _get_chunk_output_dir(self,chunk,rng):
        work_dir = self.files['work_dir']
        return os.path.join(
            work_dir,
            'chunk%05d_%06d_%06d' % (chunk,rng[0],rng[1]))

    
    def _get_chunk_output_base(self,chunk,rng):
        fmt='%s-%s-%06d-%06d'
        return fmt % (self.files['identifier'],
                      self.run_conf['name'],
                      rng[0],rng[1])

    def _get_chunk_output_file_generic(self,chunk,rng, ext):
        dir=self._get_chunk_output_dir(chunk, rng)

        base=self._get_chunk_output_base(chunk, rng)

        fname = '%s%s' % (base, ext)
        fname = os.path.join(dir, fname)
        return fname

    def _get_chunk_output_file(self,chunk,rng):
        return self._get_chunk_output_file_generic(
            chunk,
            rng,
            '.fits',
        )
    def _get_chunk_log_file(self,chunk,rng):
        return self._get_chunk_output_file_generic(
            chunk,
            rng,
            '.log',
        )
    def _get_chunk_script_file(self,chunk,rng):
        dir=self._get_chunk_output_dir(chunk, rng)
        return os.path.join(dir, "runchunk.sh")

    def _get_chunk_job_file(self,chunk,rng):
        dir=self._get_chunk_output_dir(chunk, rng)
        return os.path.join(dir, "job.sh")

    def _make_output_dirs(self, skip_chunks=False):
        files=self.files
        if not os.path.exists(files['work_dir']):
            os.makedirs(files['work_dir'])

        if not skip_chunks:
            self._set_chunk_ranges()

            for chunk,rng in enumerate(self.chunk_ranges):
                dr = self._get_chunk_output_dir(chunk,rng)
                if not os.path.exists(dr):
                    os.mkdir(dr)

    def _get_nrows(self):
        fname=self.meds_files[0]
        with fitsio.FITS(fname) as fits:
            nrows = fits['object_data'].get_nrows()

        return nrows

    def _set_chunk_ranges(self):

        if hasattr(self, 'chunk_ranges'):
            return

        files=self.files

        nrows = self._get_nrows()

        chunksize=self.run_conf['chunksize']
        nchunks = nrows/chunksize
        if nchunks*chunksize < nrows:
            nchunks += 1

        chunk_ranges = []
        for chunk in xrange(nchunks):
            sr = chunk*chunksize
            sp = sr + chunksize - 1
            if sp >= nrows:
                sp = nrows-1
            chunk_ranges.append([sr,sp])

        self.chunk_ranges = chunk_ranges


    def _load_config(self):
        from ngmixer.files import read_yaml
        self.conf = read_yaml(self.config_file)
        self.run_conf = self.conf['run']

    def _get_job_template(self):
        template=r"""#!/bin/bash
#BSUB -J {jobname}
#BSUB -oo ./{jobname}.oe
#BSUB -R "linux64 && rhel60 && scratch > 6"
#BSUB -n 1
#BSUB -We 24:00
#BSUB -W 48:00

export TMPDIR=/scratch/$USER/$LSB_JOBID-$LSB_JOBINDEX
mkdir -p $TMPDIR

logfile={logfile}

logbase=$(basename $logfile)
tmplog=$TMPDIR/$logbase

./runchunk.sh &> $tmplog

mv -vf $tmplog $logfile

rm -rf $TMPDIR

"""

        return template

    def _get_script_template(self):
        template = r"""#!/bin/bash

config={ngmix_config}
outfile={output_file}
meds="{meds_files}"

ngmixit \
    --fof-range={start},{stop} \
    --work-dir=$TMPDIR \
    {seed_opt} \
    $config $outfile $meds

"""
        return template


def get_megamixer(system):
    if system == 'shell':
        MMixer = NGMegaMixer
    elif system == 'slac':
        MMixer = SLACMEDSMegaMixer
    elif system == 'slac-array':
        MMixer = SLACArrayNGMegaMixer
    elif system == 'bnl-condor':
        MMixer = ngmixer.megamixer.BNLCondorMegaMixer
    elif system == 'cake':
        MMixer = CakeNGMegaMixer
    else:
        raise ValueError("system %s not supported!" % system)

    return MMixer

def main():
    from ngmixer.files import read_yaml

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    ngmixer.defaults.VERBOSITY.level = options.verbosity

    # get command
    config_file = args[0]
    cmd = args[1]
    meds_files=args[2:]

    MMixer = get_megamixer(options.system)

    ngmm = MMixer(config_file, meds_files, seed=options.seed)

    if cmd == 'setup':
        ngmm.setup()

    elif 'collate' in cmd:
        ngmm.collate(coadd_run,
                     verify=False,
                     blind=not options.noblind,
                     clobber=options.clobber,
                     skip_errors=options.skip_errors)
        if 'link' in cmd:
            ngmm.link(coadd_run,
                      verify=False,
                      blind=not options.noblind,
                      clobber=options.clobber,
                      skip_errors=options.skip_errors)

    elif cmd == 'verify':
        ngmm.verify(coadd_run,
                    blind=not options.noblind,
                    clobber=options.clobber,
                    skip_errors=False)
    elif cmd == 'clean':
        ngmm.clean(coadd_run)
    elif cmd == 'archive':
        ngmm.archive(coadd_run,
                     compress=not options.nocompress)
    else:
        raise ValueError("cmd %s not valid!" % cmd)


if __name__ == '__main__':
    main()
