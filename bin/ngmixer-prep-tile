#!/usr/bin/env python
"""
Prepare files for running ngmixer on one DES coadd tile.

Fetches input MEDS, PSF, and psfmap files to a directory under $MEDS_DIR
"""
from __future__ import print_function

import argparse
import os
import sys
import csv
import subprocess
import shutil
import desmeds
from pprint import pprint
from desmeds import files

from argparse import RawTextHelpFormatter
parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=RawTextHelpFormatter,
)

parser.add_argument(
    'medsconf',
    help='meds configuration or processing campaign for desdm',
)

parser.add_argument(
    'tilename',
    help=('Name of tile or tile_id to process, e.g. '
          'DES0123-4567 or DES0123-4567_r2590p01'),
)

parser.add_argument(
    '--bands',
    help='Set of bands to process, default griz',
    default='griz',
)
parser.add_argument(
    '--clobber',
    action='store_true',
    help='over-write existing files',
)

REMOTE_MEDS_DIR = "http://www.cosmo.bnl.gov/Private/gpfs/workarea/desdata/meds"

class Getter(dict):
    """
    download the requested MEDS and psfmap files, plus all psf files
    """
    def __init__(self, medsconf, tilename, bands, clobber=False):
        self['medsconf'] = medsconf
        self['tilename'] = tilename
        self['bands'] = bands
        self['meds_base'] = files.get_meds_base()
        self['clobber']=clobber

    def go(self):
        """
        make directories and download files
        """

        self._set_files()
        self._makedirs()
        self._sync_files()

    def _sync_files(self):
        self._sync_meds()
        self._sync_psfs()

    def _sync_meds(self):
        """
        sync the actual meds and psfmap files one at a time
        """

        try:
            fdict=self.fdict
            clobber=self['clobber']

            os.chdir( fdict['meds_dir'] )
            for info in fdict['file_info']:

                for type in ['meds','psfmap']:
                    tmp_dir=fdict['%s_tmp_dir' % type]

                    fname=info['%s_fname' % type]
                    tmp_fname= info['%s_tmp_fname' % type]

                    fexists=os.path.exists(fname)
                    if fexists:
                        if clobber:
                            print("removing existing file:",fname)
                            os.remove(fname)
                        else:
                            continue

                    cmd = ['wget','-q','-P',tmp_dir,info['meds_fname_remote']]
                    print(' '.join(cmd))
                    subprocess.check_call(cmd)

                    print("moving:",tmp_fname, local_file)
                    shutil.move(tmp_fname, local_file)

        finally:
            for dname in ['meds_tmp_dir','psf_tmp_dir']:
                dir = fdict[dname]
                if os.path.exists(dir):
                    print('removing tmp dir:',dir)
                    shutil.rmtree(dir)

    def _sync_psfs(self):
        print("psf syncing not yet written")

    def _set_files(self):
        """
        set all the paths that will be copied
        """

        fdict={}
        fdict['meds_dir'] = files.get_meds_dir(self['medsconf'], self['tilename'])
        fdict['meds_tmp_dir'] = os.path.join(fdict['meds_dir'], '.tmp')

        fdict['psf_dir']=files.get_psf_dir(self['medsconf'],self['tilename'])
        fdict['psf_tmp_dir']=os.path.join(fdict['psf_dir'], '.tmp')
        fdict['psf_remote_dir']=fdict['psf_dir'].replace(self['meds_base'], REMOTE_MEDS_DIR )


        file_info = []
        for band in self['bands']:
            meds_fname=files.get_meds_file(
                self['medsconf'],
                self['tilename'],
                band,
            )
            psfmap_fname=files.get_psfmap_file(
                self['medsconf'],
                self['tilename'],
                band,
            )

            meds_fname_remote = meds_fname.replace(self['meds_base'], REMOTE_MEDS_DIR )
            meds_tmp_fname = os.path.join(fdict['meds_tmp_dir'], os.path.basename(meds_fname))

            psfmap_fname_remote = psfmap_fname.replace(self['meds_base'], REMOTE_MEDS_DIR )
            psfmap_tmp_fname = os.path.join(fdict['meds_tmp_dir'], os.path.basename(psfmap_fname))

            file_info.append(
                {
                    'meds_fname':meds_fname,
                    'meds_tmp_fname':meds_tmp_fname,
                    'meds_fname_remote':meds_fname_remote,
                    'psfmap_fname':psfmap_fname,
                    'psfmap_tmp_fname':psfmap_tmp_fname,
                    'psfmap_fname_remote':psfmap_fname_remote,
                }
            )

        fdict['file_info'] = file_info

        self.fdict=fdict
        
    def _makedirs(self):
        """
        make all the output directories
        """
        
        fdict=self.fdict

        dnames=[
            'meds_dir',
            'meds_tmp_dir',
            'psf_dir',
            'psf_tmp_dir',
        ]


        for dname in dnames:
            dir=fdict[dname]
            makedirs(dir)



def makedirs(dir):
    if dir=='' or dir is None:
        return

    if os.path.exists(dir):
        return
    print("making directory:",dir)
    try:
        os.stat(dir)
    except:
        try:
            os.makedirs(dir)
        except:
            # probably a race condition
            pass



if __name__ == "__main__":
    args=parser.parse_args()

    getter=Getter(
        args.medsconf,
        args.tilename,
        args.bands,
        clobber=args.clobber,
    )
    getter.go()
