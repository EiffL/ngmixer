#!/usr/bin/env python
"""
    %prog [options] command run_config_file coadd_tile
    Process the input coadd_tile.

    Possible commands are:
        setup - setup jobs
        run - run jobs
        rerun - rerun jobs
        collate - combine job outputs into a single file"""
import os
import sys
import meds
import fitsio
import numpy as np
import glob

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--system",default='shell',
                  help=("name of system for jobs"))

parser.add_option("--queue",default=None,
                  help=("queue to submit to"))

parser.add_option("--extra-cmds",default='',
                  help=("extra commands to run in job script"))

parser.add_option('--noblind',action='store_true',
                  help="don't blind the catalog")
parser.add_option('--clobber',action='store_true',
                  help="clobber existing catalog, else skip over")

parser.add_option('--verify',action='store_true',
                  help="just verify every file")
parser.add_option('--skip-errors',action='store_true',
                  help="skip over errors")

parser.add_option("--verbosity", default=0,
                  help=("set verbosity level"))

from ngmixer.megamixer import NGMegaMixer
from ngmixer.megamixer import SLACNGMegaMixer
import ngmixer

if __name__ == '__main__':
    from ngmixer.files import read_yaml

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    if options.system == 'shell':
        MMixer = NGMegaMixer
    elif options.system == 'slac':
        MMixer = SLACNGMegaMixer
    else:
        raise ValueError("system %s not supported!" % options.system)

    ngmixer.defaults.VERBOSITY.level = int(options.verbosity)

    cmd = args[0]
    conf = read_yaml(args[1])
    tile = args[2]
    conf['run_config'] = args[1]
    
    if options.queue is not None:
        conf['queue'] = options.queue
    
    ngmm = MMixer(conf,extra_cmds=options.extra_cmds)

    if cmd == 'setup':
        ngmm.setup_coadd_tile(tile)
    elif cmd == 'run':
        ngmm.run_coadd_tile(tile)
    elif cmd == 'rerun':
        ngmm.rerun_coadd_tile(tile)
    elif cmd == 'collate':
        ngmm.collate_coadd_tile(tile,
                                verify=options.verify,
                                blind=not options.noblind,
                                clobber=options.clobber,
                                skip_errors=options.skip_errors)
    else:
        raise ValueError("cmd %s not valid!" % cmd)
